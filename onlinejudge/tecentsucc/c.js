/**
 * 题目描述：
 * 判断一个给定的数独是否是正确的，大小是N*N
 * @param data
 * @returns {{isValid: isValid}}
 * @constructor
 */
var Sudoku = function (data) {
    //   Private methods
    // -------------------------
    // var rdata = [];//存放转置矩阵
    var n = data.length;
/*    for (var i = 0; i < n; i++) {
        rdata[i] = [];
        for (var j = 0; j < n; j++) {
            rdata[i][j] = data[j][i];
        }
    }*/

    //检查当前行和当前列是否
    var checkColRow = function () {
        for (var i = 0; i < n; i++) {
            for (var j = 0; j < n; j++) {
                var cur = data[i][j];
                //若当前元素不存在或者超出1-n的范围，返回失败
                if (typeof (cur) != 'number' || cur < 1 || cur > n) return false;
                //判断当前行是否有重复
                for(var k=j+1;k<n;k++){
                    if(data[i][k]==cur) return false;
                }
                // if (data[i].slice(j + 1).toString().indexOf(cur) != -1) return false;
                //判断当前列是否有重复
                for(var l=i+1;l<n;l++){
                    if(data[l][j]==cur) return false;
                }
                // if (rdata[j].slice(i + 1).toString().indexOf(cur) != -1) return false;
            }
        }
        return true;
    };

    //检查子模块，判断条件：元素是否重复出现过
    var checkSubSudo = function () {
        var n = data.length;
        var len = Math.sqrt(n);
        var arr = {};//存放子模块中的元素
        for (var baseX = 0; baseX < n;) {
            for (var baseY = 0; baseY < n;) {
                arr = {};
                for (var i = 0; i < len; i++) {
                    for (var j = 0; j < len; j++) {
                        var cur = data[baseX + i][baseY + j];
                        if (!arr[cur]) {
                            arr[cur]=1;
                        }else{
                            return false;
                        }
                    }
                }
                baseY += len;
            }
            baseX += len;
        }
        return true;
    };

    //   Public methods
    // -------------------------
    return {
        isValid: function () {
            // YOUR SOLUTION
            return checkColRow() && checkSubSudo();
        }
    };
};
/*
var goodSudoku1 = new Sudoku([
    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],
    [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,1],
    [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,1,2],
    [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,1,2,3],
    [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,1,2,3,4],
    [6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,1,2,3,4,5],
    [7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,1,2,3,4,5,6],
    [8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,1,2,3,4,5,6,7],
    [9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,1,2,3,4,5,6,7,8],
    [10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,1,2,3,4,5,6,7,8,9],
    [11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,1,2,3,4,5,6,7,8,9,10],
    [12,13,14,15,16,17,18,19,20,21,22,23,24,25,1,2,3,4,5,6,7,8,9,10,11],
    [13,14,15,16,17,18,19,20,21,22,23,24,25,1,2,3,4,5,6,7,8,9,10,11,12],
    [14,15,16,17,18,19,20,21,22,23,24,25,1,2,3,4,5,6,7,8,9,10,11,12,13],
    [15,16,17,18,19,20,21,22,23,24,25,1,2,3,4,5,6,7,8,9,10,11,12,13,14],
    [16,17,18,19,20,21,22,23,24,25,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],
    [17,18,19,20,21,22,23,24,25,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],
    [18,19,20,21,22,23,24,25,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],
    [19,20,21,22,23,24,25,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],
    [20,21,22,23,24,25,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],
    [21,22,23,24,25,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],
    [22,23,24,25,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],
    [23,24,25,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],
    [24,25,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],
    [25,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
]);

console.log(goodSudoku1.isValid());*/
